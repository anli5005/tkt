scalar Data
scalar Date

type User {
    id: ID!
    events: [FullEvent!]!
}

type FullEvent {
    id: ID!
    meta: Data!
    slug: String!
    users: [User!]!
    tickets: [Ticket!]!
    ticket(id: ID!): Ticket
}

type Event {
    id: ID!
    meta: Data!
    slug: String!
}

type Ticket {
    id: ID!
    meta: Data!
    email: String
    token: String!
    event: Event!
    status: Int!
    log: [TicketLogItem!]!
}

type TicketLogItem {
    ticket: Ticket!
    status: Int!
    date: Date!
    user: User
}

type Query {
    me: User
    event(id: ID!): FullEvent
    ticket(eventID: ID!, eventSlug: String!, ticketToken: String!): Ticket
}

scalar TicketInput

type Mutation {
    createEvent(slug: String!, meta: Data!): Event
    updateEventMeta(id: ID!, meta: Data!): Event
    updateEventSlug(id: ID!, string: String!): Event
    addEventUser(id: ID!, user: ID!): Event
    removeEventUser(id: ID!, user: ID!): Event
    removeEvent(id: ID!): Boolean!

    createTickets(event: ID!, tickets: [TicketInput!]!, send: Boolean = false): [Ticket!]
    updateTicketMeta(event: ID!, ticket: ID!, meta: Data!): Ticket
    updateTicketEmail(event: ID!, ticket: ID!, email: String, send: Boolean = false): Ticket
    updateTicketStatus(event: ID!, ticket: ID!, status: Int!): Ticket
    regenerateTicketToken(event: ID!, ticket: ID!): Ticket
    removeTickets(event: ID!, tickets: [ID!]!): Boolean!
}